const std = @import("std");
const Allocator = std.mem.Allocator;
const Zalloc = @import("zalloc").Zalloc;
const Gpa = std.heap.GeneralPurposeAllocator(.{});
const Arena = std.heap.ArenaAllocator;
const Page = std.heap.page_allocator;
const Malloc = std.heap.c_allocator;

pub fn main() !void {
    // Init all
    var zally = Zalloc.init();
    var gally = Gpa{};
    var ally = Arena.init(std.heap.c_allocator);
    var pally = Page;
    var mally = Malloc;

    const alloc_n = 5;
    const allocs = [alloc_n]Allocator{
        zally.allocator(), gally.allocator(),
        ally.allocator(),  pally,
        mally,
    };
    const alloc_names = [_][]const u8{ "zalloc", "gpa", "arena", "page", "malloc" };

    const fn_n = 2;
    const fns = [fn_n]fn (Allocator) u64{ allocSingleSizeThenFree, allocDifferentSizeThenFree };
    const fn_names = [fn_n][]const u8{ "allocSingleSizeThenFree", "allocDifferentSizeThenFree" };

    const reps = 1 << 12;
    var timings: [fn_n][alloc_n][reps]u64 = [_][alloc_n][reps]u64{
        [_][reps]u64{[_]u64{0} ** reps} ** alloc_n,
    } ** fn_n;

    var k: u64 = 0;
    while (k < reps) : (k += 1) {
        for (allocs) |allocator, j| {
            for (fns) |f, i|
                timings[i][j][k] = f(allocator);
        }
    }

    for (timings) |f, f_i| {
        for (f) |alloc, alloc_i| {
            var sum: u64 = 0;
            for (alloc) |rep| sum += rep;
            std.debug.print(
                "{s: <26} took {: >6}ns with {s}\n",
                .{ fn_names[f_i], sum / reps, alloc_names[alloc_i] },
            );
        }
        std.debug.print("\n", .{});
    }

    // Deinit all
    _ = zally;
    std.debug.assert(!gally.deinit());
    ally.deinit();
    _ = pally;
    _ = mally;
}

fn allocSingleSizeThenFree(alloc: Allocator) u64 {
    var now = std.time.Timer.start() catch unreachable;
    const size = 512;
    var slice: []u8 = alloc.alloc(u8, size) catch unreachable;

    alloc.free(slice);
    return now.read();
}

// TODO: random
fn allocDifferentSizeThenFree(alloc: Allocator) u64 {
    var now = std.time.Timer.start() catch unreachable;
    const n = 512;
    const sizes = [n]u32{
        8489,  16342, 7969,  2198,  13516, 13727, 6220,  2318,
        211,   5892,  11958, 11486, 15847, 1513,  1182,  131,
        8183,  13402, 4794,  3055,  4847,  3857,  10712, 10140,
        6455,  5552,  8241,  10223, 12616, 6901,  844,   4210,
        8416,  15648, 14314, 6480,  5500,  13558, 502,   12,
        4368,  7924,  12300, 9312,  5701,  2254,  11999, 10270,
        1056,  3414,  8644,  3249,  8941,  12082, 16172, 8800,
        15930, 8351,  1876,  3595,  12017, 5778,  4147,  7687,
        9339,  8855,  4999,  15148, 10408, 10432, 6411,  13189,
        14021, 2428,  10149, 12775, 10584, 6157,  15975, 2759,
        14227, 15277, 13464, 3647,  3687,  2645,  10069, 3083,
        8108,  13813, 4282,  4598,  12846, 3984,  7121,  3755,
        13694, 11148, 2135,  1001,  13962, 6722,  13447, 2222,
        11755, 15724, 7252,  491,   1643,  6364,  2498,  10123,
        6582,  14735, 13931, 3295,  7869,  2659,  7723,  14016,
        1157,  9584,  7373,  14092, 9363,  3078,  2351,  10035,
        3696,  6021,  11240, 4281,  7733,  5725,  4076,  5183,
        9491,  16051, 6013,  10414, 11475, 430,   2028,  13723,
        9780,  2026,  7232,  3971,  3774,  12934, 7618,  4476,
        4153,  12385, 6206,  9247,  1559,  16376, 14344, 13620,
        7337,  5395,  9789,  7636,  366,   4983,  3836,  505,
        7111,  1092,  3551,  16324, 8694,  7755,  7247,  8829,
        11867, 10514, 15559, 9408,  6743,  8670,  8854,  5355,
        8253,  2810,  3393,  2323,  11081, 2666,  10726, 3769,
        15142, 12257, 13310, 3697,  4852,  1729,  8958,  4965,
        11879, 11814, 11078, 7440,  6017,  10042, 5747,  4278,
        9355,  15107, 6253,  12621, 12301, 1707,  1286,  3659,
        10513, 11058, 12837, 1969,  7574,  1311,  236,   14295,
        8915,  8316,  14242, 11480, 5766,  13138, 13923, 2764,
        9569,  15202, 15787, 6445,  3663,  13122, 5173,  7775,
        418,   2249,  15172, 8679,  4008,  13449, 12562, 10687,
        10353, 8677,  5625,  10971, 2593,  15588, 12270, 1022,
        12330, 13391, 9712,  15974, 338,   15465, 7067,  663,
        450,   6233,  12479, 5925,  4823,  9133,  6552,  2771,
        7559,  13839, 3577,  8466,  8755,  15688, 5203,  5345,
        9716,  8982,  7137,  16297, 12029, 5888,  6357,  3460,
        3804,  5177,  5090,  10587, 4854,  14231, 1952,  14246,
        5602,  11024, 6741,  1176,  2441,  15630, 1547,  15571,
        11172, 9648,  6964,  3703,  11109, 3733,  7109,  14512,
        9885,  258,   6527,  11590, 15942, 14286, 15638, 4320,
        9170,  8778,  16273, 2962,  10696, 14887, 7708,  233,
        15256, 520,   13816, 8561,  1143,  4430,  6007,  674,
        13260, 11357, 8319,  3607,  14774, 7402,  13950, 1943,
        11307, 269,   8016,  5773,  14103, 13137, 1915,  14649,
        6221,  15773, 7629,  10033, 172,   15921, 4701,  10878,
        9199,  13,    1183,  3478,  3802,  11051, 11910, 4056,
        13918, 737,   3519,  10943, 8641,  14801, 10998, 5894,
        914,   4911,  11818, 8907,  4062,  15141, 14795, 13333,
        13766, 3366,  13054, 15475, 13630, 8499,  2935,  11270,
        10957, 11593, 3243,  1458,  11854, 2579,  3579,  4897,
        11934, 10269, 3736,  4122,  13014, 2885,  11494, 15726,
        13708, 3209,  12803, 2682,  13512, 3910,  14686, 472,
        5807,  8889,  3874,  47,    5672,  1479,  5423,  12035,
        16327, 764,   15053, 3108,  15754, 9080,  4003,  6207,
        3360,  174,   13119, 11552, 1782,  10219, 12751, 6382,
        902,   6197,  2774,  10006, 1523,  10937, 5255,  2679,
        7271,  2352,  195,   9931,  12486, 11043, 13970, 12147,
        6562,  768,   15634, 13757, 15656, 15352, 11364, 14586,
        14078, 11289, 14723, 13476, 2736,  15383, 9537,  4453,
        1098,  13269, 4758,  2044,  10590, 14154, 4834,  1495,
        1557,  11262, 9234,  16059, 5780,  7423,  7224,  2892,
        14933, 10759, 15226, 12573, 3675,  4450,  14839, 12087,
        9970,  8876,  11248, 5393,  4826,  5402,  10582, 1395,
        8514,  6532,  4019,  7320,  10556, 14056, 13966, 16170,
    };
    var slices: [n][]u8 = undefined;

    for (sizes) |size, i| {
        slices[i] = alloc.alloc(u8, size) catch unreachable;
    }
    for (slices) |slice| {
        alloc.free(slice);
    }
    return now.read();
}
